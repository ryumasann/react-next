1. 純関数 (pure function) にはどのような特徴があるか説明してください
純関数とは、同じ入力に対して常に同じ出力を返し、副作用を持たない関数です。以下に純関数の主な特徴を挙げます：

決定論的：

同じ入力を与えると常に同じ結果を返します。
例: f(x) = x * 2は純関数です。xに2を渡すと常に4を返します。
副作用がない：

関数外の状態を変更しないし、外部からの変更も受けません。
副作用の例には、データベースの更新、ファイルへの書き込み、DOMの操作、グローバル変数の変更などがあります。
外部依存がない：

純関数はその内部で計算を完結させるため、関数の外部に依存しません。
例: API呼び出しや日時の取得など、外部の状態に依存する操作は行いません。


2. 純関数でないこと（副作用を持つこと）のデメリットを説明してください
副作用を持つ関数は、以下のようなデメリットがあります：

予測困難：

関数が同じ入力で異なる出力を返す可能性があるため、デバッグが難しくなります。
状態が変化することでバグが発生しやすくなります。
テストが難しい：

外部状態に依存するため、ユニットテストが難しくなります。
テストのために外部環境を整える必要があり、テストの実行が遅くなります。
再利用性の低下：

副作用があると、関数が特定の状況や状態に依存するため、再利用性が低下します。
パフォーマンスの低下：

副作用の管理や状態の変更に伴うコストが増加し、パフォーマンスが低下することがあります。




3. 純関数にするためにはどのようなことに気をつければよいか説明してください
純関数を作成するためには、以下の点に注意します：

外部状態の変更を避ける：

関数内でグローバル変数や外部変数を変更しないようにします。
例: 配列をソートする関数では、元の配列を変更せず、新しい配列を返すようにします。
外部依存を排除する：

関数は入力パラメータのみに依存し、外部の状態（例: 日付、ランダム数、グローバル変数）に依存しないようにします。
例: 現在の日付や時間を利用する場合は、日時をパラメータとして関数に渡すようにします。
副作用を持つ処理を分離する：

必要な副作用を持つ処理は純関数から分離し、別の関数で管理します。
例: データベースの更新を行う関数と、そのためのデータを準備する純関数を分けます。
イミュータブルデータを使用する：

関数内でデータを変更する場合、元のデータを変更せず、新しいデータを作成して返します。
例: 配列やオブジェクトを操作する際に、元の配列やオブジェクトを変更せず、新しい配列やオブジェクトを返すようにします。
入力の変更を避ける：

関数内で入力引数を直接変更しないようにします。入力引数を変更する場合は、そのコピーを作成して操作します。
例: オブジェクトのプロパティを変更する場合は、オリジナルのオブジェクトを変更せずに、新しいオブジェクトを作成します。
これらの点に気をつけることで、関数を純関数として定義しやすくなり、コードの予測可能性、テスト可能性、再利用性が向上します。
